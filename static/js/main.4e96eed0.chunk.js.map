{"version":3,"sources":["components/AppNavbar.js","components/Status.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","color","dark","expand","className","href","style","onClick","this","navbar","Component","Status","props","liveData","loading","setTimeout","axios","method","url","headers","params","country","then","response","maxElem","data","stat_by_country","length","catch","error","console","log","interval","setInterval","clearInterval","total_cases","total_recovered","total_deaths","record_date","active_cases","new_cases","sm","md","xs","marginBottom","fontSize","float","format","body","inverse","marginTop","marginLeft","version","App","margin","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4e96eed0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, Container } from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n\tstate = {\r\n\t\tisOpen: false\r\n\t};\r\n\r\n\ttoggle = () => {\r\n\t\tthis.setState({\r\n\t\t\tisOpen: !this.state.isOpen\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<NavbarBrand href=\"/\" style={{}}>\r\n\t\t\t\t\t\t\t<i className=\"fa fa-line-chart\" /> &nbsp; Corona Tracker\r\n\t\t\t\t\t\t</NavbarBrand>\r\n\t\t\t\t\t\t<NavbarToggler onClick={this.toggle} />\r\n\t\t\t\t\t\t<Collapse isOpen={this.state.isOpen} navbar>\r\n\t\t\t\t\t\t\t<Nav className=\"ml-auto\" navbar>\r\n\t\t\t\t\t\t\t\t{/* <NavItem>\r\n                  <NavLink href=\"https://github.com/bradtraversy/mern_shopping_list\">\r\n                    Github Repo\r\n                  </NavLink>\r\n                </NavItem> */}\r\n\t\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t</Collapse>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Navbar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AppNavbar;\r\n","import React, { Component } from 'react';\r\nimport { Card, CardText, CardBody, Row, Col } from 'reactstrap';\r\nimport Moment from 'react-moment';\r\nimport axios from 'axios';\r\n\r\nclass Status extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tlet interval;\r\n\t\tthis.state = {\r\n\t\t\tliveData: {},\r\n\t\t\tloading: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'content-type': 'application/octet-stream',\r\n\t\t\t\t\t'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\r\n\t\t\t\t\t'x-rapidapi-key': '166fcdaa89mshb7338a5af2cf6f8p155c53jsn54f7d7c45dfc'\r\n\t\t\t\t},\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tcountry: 'India'\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tlet maxElem = response.data.stat_by_country.length;\r\n\t\t\t\t\tlet liveData = response.data.stat_by_country[maxElem - 1];\r\n\t\t\t\t\tthis.setState({ liveData, loading: false });\r\n\t\t\t\t\t//console.log(this.state.liveData);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t}, 1000);\r\n\r\n\t\tthis.interval = setInterval(() => {\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'content-type': 'application/octet-stream',\r\n\t\t\t\t\t'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\r\n\t\t\t\t\t'x-rapidapi-key': '166fcdaa89mshb7338a5af2cf6f8p155c53jsn54f7d7c45dfc'\r\n\t\t\t\t},\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tcountry: 'India'\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tlet maxElem = response.data.stat_by_country.length;\r\n\t\t\t\t\tlet liveData = response.data.stat_by_country[maxElem - 1];\r\n\t\t\t\t\tthis.setState({ liveData, loading: false });\r\n\t\t\t\t\t//console.log(this.state.liveData);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t});\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.interval);\r\n\t}\r\n\r\n\trender() {\r\n\t\t//console.log(this.state.liveData);\r\n\t\tconst {\r\n\t\t\ttotal_cases,\r\n\t\t\ttotal_recovered,\r\n\t\t\ttotal_deaths,\r\n\t\t\trecord_date,\r\n\t\t\tactive_cases,\r\n\t\t\tnew_cases\r\n\t\t} = this.state.liveData;\r\n\t\treturn (\r\n\t\t\t<Row>\r\n\t\t\t\t<Col sm=\"12\" md=\"12\" xs=\"12\" style={{ marginBottom: '20px' }}>\r\n\t\t\t\t\t<span style={{ fontSize: '20px', color: 'blue', float: 'left' }}>\r\n\t\t\t\t\t\t<b>\r\n\t\t\t\t\t\t\tINDIA (as of <Moment format=\"DD/MM/YYYY HH:mm\">{record_date}</Moment>)\r\n\t\t\t\t\t\t</b>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"3\" md=\"3\" xs=\"4\">\r\n\t\t\t\t\t<Card body inverse color=\"info\">\r\n\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t<CardText>\r\n\t\t\t\t\t\t\t\t<p style={{ fontSize: '18px' }}>Cases #</p>\r\n\t\t\t\t\t\t\t\t<p style={{ color: 'orange', fontSize: '30px' }}>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<b>{total_cases}</b>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</CardText>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"3\" md=\"3\" xs=\"4\">\r\n\t\t\t\t\t<Card body inverse color=\"success\">\r\n\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t<CardText>\r\n\t\t\t\t\t\t\t\t<p style={{ fontSize: '18px' }}>Recovered #</p>\r\n\t\t\t\t\t\t\t\t<p style={{ color: 'orange', fontSize: '30px' }}>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<b>{total_recovered}</b>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</CardText>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"3\" md=\"3\" xs=\"4\">\r\n\t\t\t\t\t<Card body inverse color=\"danger\">\r\n\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t<CardText>\r\n\t\t\t\t\t\t\t\t<p style={{ fontSize: '18px' }}>Deaths #</p>\r\n\t\t\t\t\t\t\t\t<p style={{ color: 'orange', fontSize: '30px' }}>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<b>{total_deaths}</b>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</CardText>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"3\" md=\"3\" xs=\"4\">\r\n\t\t\t\t\t<Card body inverse color=\"warning\">\r\n\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t<CardText>\r\n\t\t\t\t\t\t\t\t<p style={{ fontSize: '18px' }}>New #</p>\r\n\t\t\t\t\t\t\t\t<p style={{ color: 'blue', fontSize: '30px' }}>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<b>{new_cases}</b>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</CardText>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col sm=\"3\" md=\"3\" xs=\"4\" style={{ marginTop: '25px' }}>\r\n\t\t\t\t\t<Card body inverse color=\"primary\">\r\n\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t<CardText>\r\n\t\t\t\t\t\t\t\t<p style={{ fontSize: '18px' }}>Active #</p>\r\n\t\t\t\t\t\t\t\t<p style={{ color: 'orange', fontSize: '30px' }}>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<b>{active_cases}</b>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</CardText>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Status;\r\n","import React from 'react';\r\nimport { version } from '../../package.json';\r\n\r\nexport default () => {\r\n\treturn (\r\n\t\t<footer className=\"bg-dark text-white mt-5 p-4 text-center\">\r\n\t\t\t<a href=\"https://github.com/srideep-indpro/India-corona-tracker\">Contribute on Github</a>\r\n\t\t\t<span style={{ marginLeft: '10px' }}>Version : {version} </span>\r\n\t\t</footer>\r\n\t);\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\nimport AppNavbar from './components/AppNavbar';\nimport Status from './components/Status';\nimport { Container } from 'reactstrap';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<AppNavbar />\n\t\t\t\t<Container style={{ margin: '80px' }}>\n\t\t\t\t\t<Status />\n\t\t\t\t</Container>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}